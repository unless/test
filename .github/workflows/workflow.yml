name: Manual Workflow with Status Webhook

on:
  workflow_dispatch:   # 允许手动触发

jobs:
  build-and-notify:
    runs-on: ubuntu-latest
    outputs:
      workflow_status: ${{ job.status }}  # 捕获工作流状态
    
    steps:
      # 记录开始时间
      - name: Record start time
        id: start-time
        run: echo "start_time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      
      # 这里是您的工作流任务（可自定义）
      - name: Run main tasks
        run: |
          echo "工作流任务执行中..."
          # 这里添加您的实际任务命令
          # 示例：模拟一个可能成功或失败的任务
          if [ $((RANDOM % 2)) -eq 0 ]; then
            echo "任务成功完成"
          else
            echo "任务失败" && exit 1
          fi
      
      # 记录结束时间（仅在任务成功时执行）
      - name: Record end time (on success)
        if: success()
        id: end-time-success
        run: echo "end_time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
    
  # 无论成功失败都发送通知
  after-job:
    runs-on: ubuntu-latest
    needs: build-and-notify
    if: always()  # 即使主任务失败也执行
    
    steps:
      # 处理失败情况下的结束时间
      - name: Set end time for failed jobs
        if: needs.build-and-notify.result == 'failure'
        id: set-failure-time
        run: echo "end_time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      
      # 发送Webhook通知
      - name: Send workflow status via webhook
        uses: distributhor/workflow-webhook@v2.5.0
        with:
          url: ${{ secrets.WEBHOOK_URL }}
          method: POST
          headers: '{"Content-Type": "application/json"}'
          data: |
            {
              "workflow_name": "${{ github.workflow }}",
              "run_id": "${{ github.run_id }}",
              "status": "${{ needs.build-and-notify.result }}",
              "start_time": "${{ needs.build-and-notify.outputs.start_time }}",
              "end_time": "${{ steps.set-failure-time.outputs.end_time || needs.build-and-notify.outputs.end_time }}",
              "duration_sec": "${{ (steps.set-failure-time.outputs.end_time || needs.build-and-notify.outputs.end_time) - needs.build-and-notify.outputs.start_time }}",
              "triggered_by": "${{ github.actor }}",
              "repo": "${{ github.repository }}",
              "commit": "${{ github.sha }}"
            }
