name: 💿 St0_test
permissions:
  contents: write
  actions: write
  pull-requests: write
  packages: write
on:
  schedule:
    # 注意：GitHub Actions 使用 UTC 时间
    # 北京时间凌晨1点对应 UTC 时间的 17点（前一天）
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      network_settings:
        description: "请选择初始网络配置"
        required: true
        default: 'static'
        type: choice
        options:
          - 'static'
          - 'dhcp'
      ipaddr:
        description: '请输入管理IP（静态地址时必填）'
        required: true
        default: '192.168.111.1'
      openwrt_board:
        description: "请选择设备型号（默认当下常见设备）"
        required: true
        default: "beikeyun"
        type: choice
        options:
          - beikeyun
          - wxy-oect
          - beikeyun_wxy-oect

env:
  VERSION: '24.10.3'

jobs:
  trigger-st0:
    name: '[ST0] 同步 iStoreOS 镜像'
    runs-on: ubuntu-22.04
    outputs:
      # 定义输出，供后续任务使用
      server_date: ${{ steps.sync-ib.outputs.server_date }}
      should_update: ${{ steps.sync-ib.outputs.should_update }}
      file_name: ${{ steps.sync-ib.outputs.file_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: 同步iStoreOS镜像
        id: sync-ib
        run: |
          set -euo pipefail  # 启用严格错误处理
          ISURL="https://fw0.koolcenter.com/iStoreOS/ib/armsr"
          ISFILE="istoreos-imagebuilder-armsr-armv8.Linux-x86_64.tar.zst"
          TAG="istoreos-imagebuilder-armsr-armv8"
          # 获取服务器上的最新日期
          SERVER_DATE=$(curl -s -L "$ISURL" | grep -A1 "$TAG" | grep -oE '[0-9]{4}-[0-9]{2}-[0-9]{2}' | head -1) || exit 1
          FILE_NAME="$TAG-$SERVER_DATE.tar.zst"
          echo "获取到的服务器日期: $SERVER_DATE"
          echo "目标文件名: $FILE_NAME"
          # 检查GitHub Release中是否已存在此版本
          if RELEASE_INFO=$(curl -f -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG") && \
            echo "$RELEASE_INFO" | grep -q "\"name\":.*$FILE_NAME"; then
            echo "✅ 版本 $TAG ($SERVER_DATE) 已存在，跳过同步。"
            echo "should_update=false" >> $GITHUB_OUTPUT
          else
            echo "🔄 需要下载新版本: $FILE_NAME"
            echo "should_update=true" >> $GITHUB_OUTPUT
          fi
          # 设置输出变量
          echo "server_date=$SERVER_DATE" >> $GITHUB_OUTPUT
          echo "file_name=$FILE_NAME" >> $GITHUB_OUTPUT
          
      - name: 📝 添加新版本号
        if: steps.sync-ib.outputs.should_update == 'true'
        run: |
          ST1_FILE=".github/workflows/St1_Build-Rootfs-release.yml"
          SERVER_DATE="${{ steps.sync-ib.outputs.server_date }}"
          
          echo "检查文件: $ST1_FILE"
          echo "要添加的日期: $SERVER_DATE"
          
          # 检查是否已存在
          if grep -q " - '$SERVER_DATE'" "$ST1_FILE"; then
              echo "选项已存在，无需修改"
              exit 0
          fi
          
          # 使用简单的 sed 命令插入新选项
          sed -i "/ - 'new'/a\          - '$SERVER_DATE'" "$ST1_FILE"
          
          # 检查是否成功添加
          if grep -q " - '$SERVER_DATE'" "$ST1_FILE"; then
              echo "✅ 修改成功"
          else
              echo "❌ 修改失败"
              exit 1
          fi
      
      - name: 🔄 提交变更
        if: steps.sync-ib.outputs.should_update == 'true'
        uses: EndBug/add-and-commit@v9
        with:
          author_name: GitHub Actions
          author_email: actions@github.com
          message: "自动添加新版本选项: ${{ steps.sync-ib.outputs.server_date }} [skip ci]"
          add: ".github/workflows/St1_Build-Rootfs-release.yml"
          token: ${{ secrets.GITHUB_TOKEN }}
